#!/usr/bin/env python3
"""
Agno Agent Builder - Vers√£o Simplificada
Interface gr√°fica b√°sica para criar agentes Agno sem problemas de contexto
"""

import streamlit as st
import json
import os
from datetime import datetime
from pathlib import Path

# Carregar vari√°veis de ambiente do arquivo .env
def load_env_file():
    """Carrega vari√°veis do arquivo .env se existir"""
    env_path = Path(".env")
    if env_path.exists():
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip('"').strip("'")
                        if value and not value.startswith('xxx'):
                            os.environ[key] = value
            return True
        except Exception:
            pass
    return False

# Carregar .env no in√≠cio
load_env_file()

# Configurar p√°gina
st.set_page_config(
    page_title="ü§ñ Agno Agent Builder",
    page_icon="ü§ñ",
    layout="wide"
)

def main():
    """Interface principal simplificada"""
    
    # T√≠tulo
    st.title("ü§ñ Agno Agent Builder")
    st.markdown("### Interface Visual para Cria√ß√£o de Agentes Agno")
    
    # Verificar Agno
    try:
        import agno
        from agno.agent import Agent
        from agno.models.openai import OpenAIChat
        from agno.models.anthropic import Claude
        from agno.models.google import Gemini
        from agno.models.openrouter import OpenRouter
        st.success("‚úÖ Agno Framework carregado com sucesso!")
    except ImportError as e:
        st.error(f"""
        ‚ùå **Agno n√£o est√° instalado**
        
        **Instale com:** `pip install agno`
        
        **Erro:** {e}
        """)
        return
    
    # Abas principais
    tab1, tab2 = st.tabs(["üõ†Ô∏è Builder", "‚öôÔ∏è Settings"])
    
    with tab1:
        render_builder_tab()
    
    with tab2:
        render_settings_tab()

def render_builder_tab():
    """Renderiza a aba do builder"""
    
    # Barra lateral
    st.sidebar.title("üéØ Configura√ß√µes")
    
    # Sele√ß√£o de n√≠vel
    nivel = st.sidebar.selectbox(
        "N√≠vel do Agente:",
        [1, 2, 3, 4, 5],
        format_func=lambda x: f"N√≠vel {x}: {get_level_name(x)}"
    )
    
    st.sidebar.markdown(f"**Sobre N√≠vel {nivel}:**")
    st.sidebar.info(get_level_description(nivel))
    
    # Status das APIs
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üîë Status das APIs")
    render_api_status_sidebar()
    
    # √Årea principal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader(f"üõ†Ô∏è Configurar Agente - N√≠vel {nivel}")
        
        # Configura√ß√µes b√°sicas
        nome = st.text_input("Nome do Agente:", "Meu Agente")
        papel = st.text_input("Papel/Fun√ß√£o:", "Assistente especializado")
        
        # Modelo
        provedor = st.selectbox(
            "Provedor do Modelo:",
            ["OpenAI", "Anthropic", "Google Gemini", "OpenRouter"]
        )
        
        modelo = get_model_options(provedor)
        modelo_selecionado = st.selectbox("Modelo:", modelo)
        
        # Instru√ß√µes
        instrucoes = st.text_area(
            "Instru√ß√µes:",
            "Voc√™ √© um assistente √∫til e especializado.\nSempre seja claro e preciso.",
            height=100
        )
        
        # Ferramentas (apenas para n√≠veis que suportam)
        ferramentas = []
        if nivel >= 1:
            st.subheader("üîß Ferramentas")
            
            ferramentas_disponiveis = {
                "DuckDuckGo": st.checkbox("üîç Busca DuckDuckGo"),
                "Calculator": st.checkbox("üßÆ Calculadora"),
                "YFinance": st.checkbox("üí∞ Dados Financeiros"),
                "Email": st.checkbox("üìß Email"),
                "Python": st.checkbox("üêç Python")
            }
            
            ferramentas = [nome for nome, selecionado in ferramentas_disponiveis.items() if selecionado]
    
    with col2:
        st.subheader("üìã Resumo")
        
        config = {
            "nome": nome,
            "papel": papel,
            "provedor": provedor,
            "modelo": modelo_selecionado,
            "instrucoes": instrucoes,
            "ferramentas": ferramentas,
            "nivel": nivel
        }
        
        st.json(config)
        
        # Bot√µes de a√ß√£o
        if st.button("üîÑ Gerar C√≥digo", type="primary"):
            codigo = gerar_codigo(config)
            st.subheader("üìù C√≥digo Gerado")
            st.code(codigo, language="python")
            
            # Download
            st.download_button(
                "üì• Download C√≥digo",
                codigo,
                f"agente_{nome.lower().replace(' ', '_')}.py",
                "text/plain"
            )
        
        if st.button("üíæ Salvar Configura√ß√£o"):
            config_json = json.dumps(config, indent=2, ensure_ascii=False)
            st.download_button(
                "üì• Download Config",
                config_json,
                f"config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                "application/json"
            )

def get_level_name(nivel):
    """Retorna nome do n√≠vel"""
    nomes = {
        1: "Ferramentas & Instru√ß√µes",
        2: "Conhecimento & RAG",
        3: "Mem√≥ria & Racioc√≠nio", 
        4: "Times de Agentes",
        5: "Workflows Ag√™nticos"
    }
    return nomes.get(nivel, "Desconhecido")

def get_level_description(nivel):
    """Retorna descri√ß√£o do n√≠vel"""
    descricoes = {
        1: "Agentes b√°sicos com ferramentas espec√≠ficas e instru√ß√µes personalizadas.",
        2: "Agentes com base de conhecimento (RAG) para consultar documentos.",
        3: "Agentes com mem√≥ria persistente e capacidade de racioc√≠nio.",
        4: "M√∫ltiplos agentes trabalhando em equipe.",
        5: "Fluxos de trabalho complexos com estado e controle."
    }
    return descricoes.get(nivel, "N√≠vel n√£o definido")

def get_model_options(provedor):
    """Retorna op√ß√µes de modelo por provedor"""
    modelos = {
        "OpenAI": ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo", "gpt-4o"],
        "Anthropic": ["claude-3-5-sonnet", "claude-3-opus", "claude-3-haiku"],
        "Google Gemini": ["gemini-2.0-flash-001", "gemini-1.5-pro", "gemini-1.5-flash"],
        "OpenRouter": ["openai/gpt-4o", "anthropic/claude-3-5-sonnet", "meta-llama/llama-3.1-8b-instruct:free"]
    }
    return modelos.get(provedor, ["modelo-padrao"])

def gerar_codigo(config):
    """Gera c√≥digo Python para o agente"""
    
    # Imports
    imports = ["from agno.agent import Agent"]
    
    if config['provedor'] == "OpenAI":
        imports.append("from agno.models.openai import OpenAIChat")
        model_class = "OpenAIChat"
    elif config['provedor'] == "Anthropic":
        imports.append("from agno.models.anthropic import Claude")
        model_class = "Claude"
    elif config['provedor'] == "Google Gemini":
        imports.append("from agno.models.google import Gemini")
        model_class = "Gemini"
    elif config['provedor'] == "OpenRouter":
        imports.append("from agno.models.openrouter import OpenRouter")
        model_class = "OpenRouter"
    else:
        model_class = "OpenAIChat"
    
    # Imports de ferramentas
    tool_imports = {
        "DuckDuckGo": "from agno.tools.duckduckgo import DuckDuckGoTools",
        "Calculator": "from agno.tools.calculator import CalculatorTools",
        "YFinance": "from agno.tools.yfinance import YFinanceTools",
        "Email": "from agno.tools.email import EmailTools",
        "Python": "from agno.tools.python import PythonTools"
    }
    
    for ferramenta in config['ferramentas']:
        if ferramenta in tool_imports:
            imports.append(tool_imports[ferramenta])
    
    # Gerar c√≥digo
    codigo = "\n".join(imports) + "\n\n"
    
    # Coment√°rio sobre API
    if config['provedor'] == "OpenAI":
        codigo += "# Configure: export OPENAI_API_KEY=sua_chave\n\n"
    elif config['provedor'] == "Anthropic":
        codigo += "# Configure: export ANTHROPIC_API_KEY=sua_chave\n\n"
    elif config['provedor'] == "Google Gemini":
        codigo += "# Configure: export GOOGLE_API_KEY=sua_chave\n\n"
    elif config['provedor'] == "OpenRouter":
        codigo += "# Configure: export OPENROUTER_API_KEY=sua_chave\n\n"
    
    # Criar agente
    nome_var = config['nome'].lower().replace(' ', '_')
    codigo += f"""# Criar {config['nome']}
{nome_var} = Agent(
    name="{config['nome']}",
    role="{config['papel']}",
    model={model_class}(id="{config['modelo']}"),"""
    
    # Adicionar ferramentas
    if config['ferramentas']:
        codigo += "\n    tools=[\n"
        tool_classes = {
            "DuckDuckGo": "DuckDuckGoTools()",
            "Calculator": "CalculatorTools()",
            "YFinance": "YFinanceTools(stock_price=True)",
            "Email": "EmailTools()",
            "Python": "PythonTools()"
        }
        
        for ferramenta in config['ferramentas']:
            if ferramenta in tool_classes:
                codigo += f"        {tool_classes[ferramenta]},\n"
        codigo += "    ],"
    
    # Instru√ß√µes
    instrucoes_linhas = config['instrucoes'].split('\n')
    codigo += '\n    instructions=[\n'
    for linha in instrucoes_linhas:
        if linha.strip():
            codigo += f'        "{linha.strip()}",\n'
    codigo += '    ],'
    
    # Configura√ß√µes finais
    codigo += """
    show_tool_calls=True,
    markdown=True,
)

# Testar o agente
"""
    codigo += f'{nome_var}.print_response("Ol√°! Como voc√™ pode me ajudar?")\n'
    
    return codigo

def render_settings_tab():
    """Renderiza a aba de configura√ß√µes"""
    import os
    
    st.header("‚öôÔ∏è Configura√ß√µes de API")
    st.markdown("Configure e teste suas chaves de API dos provedores de modelos.")
    
    # Se√ß√£o de configura√ß√£o
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üîë Configurar Chaves de API")
        
        # OpenAI
        st.markdown("### üîµ OpenAI")
        openai_key = st.text_input(
            "OpenAI API Key:",
            value=os.getenv("OPENAI_API_KEY", ""),
            type="password",
            help="Obtenha em: https://platform.openai.com/api-keys"
        )
        
        if st.button("üíæ Salvar OpenAI", key="save_openai"):
            os.environ["OPENAI_API_KEY"] = openai_key
            st.success("‚úÖ Chave OpenAI salva temporariamente!")
        
        # Anthropic
        st.markdown("### üü† Anthropic")
        anthropic_key = st.text_input(
            "Anthropic API Key:",
            value=os.getenv("ANTHROPIC_API_KEY", ""),
            type="password",
            help="Obtenha em: https://console.anthropic.com/"
        )
        
        if st.button("üíæ Salvar Anthropic", key="save_anthropic"):
            os.environ["ANTHROPIC_API_KEY"] = anthropic_key
            st.success("‚úÖ Chave Anthropic salva temporariamente!")
        
        # Google
        st.markdown("### üî¥ Google Gemini")
        google_key = st.text_input(
            "Google API Key:",
            value=os.getenv("GOOGLE_API_KEY", ""),
            type="password",
            help="Obtenha em: https://makersuite.google.com/app/apikey"
        )
        
        if st.button("üíæ Salvar Google", key="save_google"):
            os.environ["GOOGLE_API_KEY"] = google_key
            st.success("‚úÖ Chave Google salva temporariamente!")
        
        # OpenRouter
        st.markdown("### üåê OpenRouter")
        openrouter_key = st.text_input(
            "OpenRouter API Key:",
            value=os.getenv("OPENROUTER_API_KEY", ""),
            type="password",
            help="Obtenha em: https://openrouter.ai/keys"
        )
        
        if st.button("üíæ Salvar OpenRouter", key="save_openrouter"):
            os.environ["OPENROUTER_API_KEY"] = openrouter_key
            st.success("‚úÖ Chave OpenRouter salva temporariamente!")
    
    with col2:
        st.subheader("üß™ Testar Conex√µes")
        
        # Status das APIs
        api_status = check_api_status()
        
        for provider, status in api_status.items():
            if status["configured"]:
                if st.button(f"üß™ Testar {provider}", key=f"test_{provider.lower()}"):
                    with st.spinner(f"Testando {provider}..."):
                        result = test_api_connection(provider)
                        if result["success"]:
                            st.success(f"‚úÖ {provider}: {result['message']}")
                        else:
                            st.error(f"‚ùå {provider}: {result['error']}")
            else:
                st.warning(f"‚ö†Ô∏è {provider}: Chave n√£o configurada")
        
        # Teste completo
        st.markdown("---")
        if st.button("üöÄ Testar Todas as APIs", type="primary"):
            test_all_apis()
    
    # Se√ß√£o de instru√ß√µes
    st.markdown("---")
    st.subheader("üìã Instru√ß√µes")
    
    with st.expander("üí° Como configurar as chaves de API"):
        st.markdown("""
        ### M√©todo 1: Interface (Tempor√°rio)
        1. Cole suas chaves nos campos acima
        2. Clique em "Salvar" para cada provedor
        3. **Nota**: As chaves s√£o salvas apenas durante esta sess√£o
        
        ### M√©todo 2: Vari√°veis de Ambiente (Permanente)
        
        **Windows (PowerShell):**
        ```powershell
        $env:OPENAI_API_KEY="sua_chave_openai"
        $env:ANTHROPIC_API_KEY="sua_chave_anthropic"
        $env:GOOGLE_API_KEY="sua_chave_google"
        $env:OPENROUTER_API_KEY="sua_chave_openrouter"
        ```
        
        **Linux/Mac (Bash):**
        ```bash
        export OPENAI_API_KEY="sua_chave_openai"
        export ANTHROPIC_API_KEY="sua_chave_anthropic"
        export GOOGLE_API_KEY="sua_chave_google"
        export OPENROUTER_API_KEY="sua_chave_openrouter"
        ```
        
        ### M√©todo 3: Arquivo .env
        1. Copie o arquivo `.env.example` para `.env`
        2. Edite o arquivo `.env` com suas chaves
        3. Reinicie a aplica√ß√£o
        """)
    
    with st.expander("üîó Links para obter chaves de API"):
        st.markdown("""
        - **OpenAI**: https://platform.openai.com/api-keys
        - **Anthropic**: https://console.anthropic.com/
        - **Google Gemini**: https://makersuite.google.com/app/apikey
        - **OpenRouter**: https://openrouter.ai/keys
        
        ### Custos Aproximados:
        - **OpenAI**: $0.01-0.06 por 1K tokens
        - **Anthropic**: $0.015-0.075 por 1K tokens
        - **Google**: Gratuito at√© 15 req/min, depois $0.001-0.002 por 1K tokens
        - **OpenRouter**: Varia por modelo (muitos gratuitos dispon√≠veis)
        """)

def render_api_status_sidebar():
    """Renderiza status das APIs na barra lateral"""
    api_status = check_api_status()
    
    for provider, status in api_status.items():
        if status["configured"]:
            st.sidebar.success(f"‚úÖ {provider}")
        else:
            st.sidebar.error(f"‚ùå {provider}")

def check_api_status():
    """Verifica status das chaves de API"""
    import os
    
    return {
        "OpenAI": {
            "configured": bool(os.getenv("OPENAI_API_KEY")),
            "key": os.getenv("OPENAI_API_KEY", "")[:20] + "..." if os.getenv("OPENAI_API_KEY") else ""
        },
        "Anthropic": {
            "configured": bool(os.getenv("ANTHROPIC_API_KEY")),
            "key": os.getenv("ANTHROPIC_API_KEY", "")[:20] + "..." if os.getenv("ANTHROPIC_API_KEY") else ""
        },
        "Google": {
            "configured": bool(os.getenv("GOOGLE_API_KEY")),
            "key": os.getenv("GOOGLE_API_KEY", "")[:20] + "..." if os.getenv("GOOGLE_API_KEY") else ""
        },
        "OpenRouter": {
            "configured": bool(os.getenv("OPENROUTER_API_KEY")),
            "key": os.getenv("OPENROUTER_API_KEY", "")[:20] + "..." if os.getenv("OPENROUTER_API_KEY") else ""
        }
    }

def test_api_connection(provider):
    """Testa conex√£o com um provedor espec√≠fico"""
    try:
        if provider == "OpenAI":
            from agno.models.openai import OpenAIChat
            from agno.agent import Agent
            
            agent = Agent(
                model=OpenAIChat(id="gpt-3.5-turbo"),
                instructions=["Responda apenas 'OK' se conseguir me ouvir."]
            )
            
            response = agent.run("Teste de conex√£o")
            return {"success": True, "message": "Conex√£o estabelecida com sucesso!"}
            
        elif provider == "Anthropic":
            from agno.models.anthropic import Claude
            from agno.agent import Agent
            
            agent = Agent(
                model=Claude(id="claude-3-haiku"),
                instructions=["Responda apenas 'OK' se conseguir me ouvir."]
            )
            
            response = agent.run("Teste de conex√£o")
            return {"success": True, "message": "Conex√£o estabelecida com sucesso!"}
            
        elif provider == "Google":
            from agno.models.google import Gemini
            from agno.agent import Agent
            
            agent = Agent(
                model=Gemini(id="gemini-1.5-flash"),
                instructions=["Responda apenas 'OK' se conseguir me ouvir."]
            )
            
            response = agent.run("Teste de conex√£o")
            return {"success": True, "message": "Conex√£o estabelecida com sucesso!"}
            
        elif provider == "OpenRouter":
            from agno.models.openrouter import OpenRouter
            from agno.agent import Agent
            
            agent = Agent(
                model=OpenRouter(id="meta-llama/llama-3.1-8b-instruct:free"),
                instructions=["Responda apenas 'OK' se conseguir me ouvir."]
            )
            
            response = agent.run("Teste de conex√£o")
            return {"success": True, "message": "Conex√£o estabelecida com sucesso!"}
            
    except Exception as e:
        return {"success": False, "error": str(e)}

def test_all_apis():
    """Testa todas as APIs configuradas"""
    api_status = check_api_status()
    
    results = {}
    for provider, status in api_status.items():
        if status["configured"]:
            with st.spinner(f"Testando {provider}..."):
                result = test_api_connection(provider)
                results[provider] = result
    
    # Mostrar resultados
    st.subheader("üìä Resultados dos Testes")
    
    success_count = 0
    for provider, result in results.items():
        if result["success"]:
            st.success(f"‚úÖ {provider}: {result['message']}")
            success_count += 1
        else:
            st.error(f"‚ùå {provider}: {result['error']}")
    
    if success_count == len(results):
        st.balloons()
        st.success(f"üéâ Todas as {success_count} APIs testadas com sucesso!")
    else:
        st.warning(f"‚ö†Ô∏è {success_count}/{len(results)} APIs funcionando corretamente")

if __name__ == "__main__":
    main()