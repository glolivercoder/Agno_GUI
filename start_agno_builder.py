#!/usr/bin/env python3
"""
Script de inicializa√ß√£o completo para o Agno Agent Builder
Verifica depend√™ncias, carrega configura√ß√µes e inicia a interface
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© adequada"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_packages = {
        'streamlit': 'streamlit',
        'agno': 'agno'
    }
    
    missing = []
    installed = []
    
    for package, pip_name in required_packages.items():
        try:
            __import__(package)
            installed.append(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing.append(pip_name)
            print(f"‚ùå {package}")
    
    if missing:
        print(f"\nüí° Para instalar depend√™ncias faltantes:")
        print(f"   pip install {' '.join(missing)}")
        return False
    
    return True

def install_provider_dependencies():
    """Instala depend√™ncias dos provedores automaticamente"""
    provider_packages = {
        'openai': 'OpenAI',
        'anthropic': 'Anthropic',
        'google-generativeai': 'Google Gemini'
    }
    
    print(f"\nüì¶ Instalando depend√™ncias dos provedores...")
    
    for package, provider in provider_packages.items():
        try:
            # Tentar importar primeiro
            if package == 'google-generativeai':
                __import__('google.generativeai')
            else:
                __import__(package)
            print(f"‚úÖ {provider} j√° instalado")
        except ImportError:
            print(f"‚ö†Ô∏è Instalando {provider}...")
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", package], 
                             check=True, capture_output=True)
                print(f"‚úÖ {provider} instalado com sucesso")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erro ao instalar {provider}: {e}")

def check_optional_dependencies():
    """Verifica depend√™ncias opcionais dos provedores"""
    optional_packages = {
        'openai': 'OpenAI',
        'anthropic': 'Anthropic', 
        'google.generativeai': 'Google Gemini'
    }
    
    print(f"\nüîç Verificando provedores:")
    available_providers = []
    
    for package, provider in optional_packages.items():
        try:
            __import__(package)
            available_providers.append(provider)
            print(f"‚úÖ {provider}")
        except ImportError:
            print(f"‚ùå {provider} n√£o dispon√≠vel")
    
    return available_providers

def load_env_file():
    """Carrega vari√°veis do arquivo .env"""
    env_path = Path(".env")
    
    if not env_path.exists():
        print(f"‚ö†Ô∏è Arquivo .env n√£o encontrado")
        
        # Verificar se existe .env.example
        example_path = Path(".env.example")
        if example_path.exists():
            print(f"üí° Copie .env.example para .env e configure suas chaves:")
            print(f"   cp .env.example .env")
        
        return {}
    
    try:
        loaded_vars = {}
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    
                    if value and not value.startswith('xxx'):
                        os.environ[key] = value
                        loaded_vars[key] = value
        
        if loaded_vars:
            print(f"‚úÖ Carregadas {len(loaded_vars)} vari√°veis do .env")
        else:
            print(f"‚ö†Ô∏è Nenhuma vari√°vel v√°lida encontrada no .env")
        
        return loaded_vars
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar .env: {e}")
        return {}

def check_api_keys():
    """Verifica quais chaves de API est√£o configuradas"""
    api_keys = {
        "OpenAI": "OPENAI_API_KEY",
        "Anthropic": "ANTHROPIC_API_KEY",
        "Google": "GOOGLE_API_KEY", 
        "OpenRouter": "OPENROUTER_API_KEY"
    }
    
    print(f"\nüîë Status das chaves de API:")
    configured = []
    
    for provider, env_var in api_keys.items():
        if os.getenv(env_var):
            configured.append(provider)
            print(f"‚úÖ {provider}")
        else:
            print(f"‚ùå {provider}")
    
    if not configured:
        print(f"\nüí° Configure pelo menos uma chave de API para usar a interface")
        print(f"   Voc√™ pode configurar na aba Settings da interface")
    
    return configured

def start_streamlit():
    """Inicia a aplica√ß√£o Streamlit"""
    print(f"\nüöÄ Iniciando Agno Agent Builder...")
    
    # Verificar qual arquivo usar
    if Path("agno_builder_simples.py").exists():
        script = "agno_builder_simples.py"
    elif Path("iniciar_agno_builder.py").exists():
        script = "iniciar_agno_builder.py"
    else:
        print(f"‚ùå Arquivo da interface n√£o encontrado")
        return False
    
    try:
        # Executar Streamlit
        cmd = [sys.executable, "-m", "streamlit", "run", script, "--server.headless", "true"]
        
        print(f"üìù Executando: streamlit run {script}")
        print(f"üåê A interface ser√° aberta em: http://localhost:8501")
        print(f"‚èπÔ∏è Para parar, pressione Ctrl+C")
        print(f"=" * 60)
        
        subprocess.run(cmd)
        return True
        
    except KeyboardInterrupt:
        print(f"\nüëã Interface encerrada pelo usu√°rio")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao iniciar Streamlit: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ Agno Agent Builder - Inicializador")
    print("=" * 50)
    
    # Verifica√ß√µes
    if not check_python_version():
        return
    
    print(f"\nüì¶ Verificando depend√™ncias:")
    if not check_dependencies():
        return
    
    # Instalar e verificar provedores
    install_provider_dependencies()
    available_providers = check_optional_dependencies()
    
    # Carregar configura√ß√µes
    print(f"\n‚öôÔ∏è Carregando configura√ß√µes:")
    env_vars = load_env_file()
    
    # Verificar APIs
    configured_apis = check_api_keys()
    
    # Resumo
    print(f"\nüìä Resumo:")
    print(f"   üêç Python: OK")
    print(f"   üì¶ Depend√™ncias: OK")
    print(f"   ü§ñ Provedores: {len(available_providers)} dispon√≠veis")
    print(f"   üîë APIs: {len(configured_apis)} configuradas")
    
    if not configured_apis:
        print(f"\n‚ö†Ô∏è Nenhuma API configurada!")
        print(f"   Voc√™ pode configurar na aba Settings da interface")
        
        response = input(f"\n‚ùì Continuar mesmo assim? (Y/n): ")
        if response.lower() == 'n':
            print(f"üëã Configura√ß√£o cancelada")
            return
    
    # Iniciar interface
    start_streamlit()

if __name__ == "__main__":
    main()