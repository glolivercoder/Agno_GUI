#!/usr/bin/env python3
"""
Exemplo b√°sico do Agno Framework
Demonstra como criar diferentes tipos de agentes
"""

import os
from agno.agent import Agent
from agno.team import Team
from agno.models.openai import OpenAIChat
from agno.models.anthropic import Claude
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.calculator import CalculatorTools
from agno.knowledge.text import TextKnowledgeBase
from agno.memory import Memory
from agno.storage.sqlite import SqliteStorage

def exemplo_agente_basico():
    """Exemplo de um agente b√°sico"""
    print("ü§ñ Criando Agente B√°sico...")
    
    agent = Agent(
        model=OpenAIChat(id="gpt-3.5-turbo"),
        instructions=[
            "Voc√™ √© um assistente √∫til e amig√°vel.",
            "Responda de forma concisa e clara.",
            "Use emojis quando apropriado."
        ],
        markdown=True,
    )
    
    print(f"‚úÖ Agente criado: {agent.model.id}")
    return agent

def exemplo_agente_com_ferramentas():
    """Exemplo de agente com ferramentas"""
    print("üîß Criando Agente com Ferramentas...")
    
    agent = Agent(
        model=OpenAIChat(id="gpt-3.5-turbo"),
        tools=[
            DuckDuckGoTools(),
            CalculatorTools()
        ],
        instructions=[
            "Voc√™ √© um assistente de pesquisa e c√°lculos.",
            "Use as ferramentas dispon√≠veis quando necess√°rio.",
            "Sempre cite suas fontes quando fizer pesquisas."
        ],
        show_tool_calls=True,
        markdown=True,
    )
    
    print(f"‚úÖ Agente com ferramentas criado: {len(agent.tools)} ferramentas")
    return agent

def exemplo_agente_com_conhecimento():
    """Exemplo de agente com base de conhecimento"""
    print("üìö Criando Agente com Conhecimento...")
    
    # Criar uma base de conhecimento simples
    knowledge_base = TextKnowledgeBase(
        path="conhecimento_exemplo.txt",
        vector_db=None  # Usar√° ChromaDB por padr√£o
    )
    
    agent = Agent(
        model=OpenAIChat(id="gpt-3.5-turbo"),
        knowledge=knowledge_base,
        instructions=[
            "Voc√™ √© um especialista que usa a base de conhecimento fornecida.",
            "Sempre referencie a fonte quando usar informa√ß√µes da base de conhecimento.",
            "Se n√£o souber algo, diga que n√£o est√° na sua base de conhecimento."
        ],
        markdown=True,
    )
    
    print(f"‚úÖ Agente com conhecimento criado")
    return agent

def exemplo_agente_com_memoria():
    """Exemplo de agente com mem√≥ria"""
    print("üß† Criando Agente com Mem√≥ria...")
    
    # Criar storage primeiro
    storage = SqliteStorage(table_name="agent_sessions", db_file="agno_memory.db")
    
    agent = Agent(
        model=OpenAIChat(id="gpt-3.5-turbo"),
        storage=storage,
        add_history_to_messages=True,
        instructions=[
            "Voc√™ √© um assistente com mem√≥ria.",
            "Lembre-se das conversas anteriores com o usu√°rio.",
            "Use o contexto das conversas passadas para dar respostas mais personalizadas."
        ],
        markdown=True,
    )
    
    print(f"‚úÖ Agente com mem√≥ria criado")
    return agent

def exemplo_time_de_agentes():
    """Exemplo de time de agentes"""
    print("üë• Criando Time de Agentes...")
    
    # Agente pesquisador
    pesquisador = Agent(
        name="Pesquisador",
        role="Pesquisa informa√ß√µes na web",
        model=OpenAIChat(id="gpt-3.5-turbo"),
        tools=[DuckDuckGoTools()],
        instructions=[
            "Voc√™ √© um pesquisador especializado.",
            "Sempre inclua fontes nas suas pesquisas.",
            "Seja preciso e objetivo."
        ],
        show_tool_calls=True,
        markdown=True,
    )
    
    # Agente analista
    analista = Agent(
        name="Analista",
        role="Analisa dados e faz c√°lculos",
        model=OpenAIChat(id="gpt-3.5-turbo"),
        tools=[CalculatorTools()],
        instructions=[
            "Voc√™ √© um analista de dados.",
            "Fa√ßa c√°lculos precisos e an√°lises detalhadas.",
            "Use tabelas para apresentar dados quando apropriado."
        ],
        show_tool_calls=True,
        markdown=True,
    )
    
    # Criar o time
    team = Team(
        members=[pesquisador, analista],
        model=OpenAIChat(id="gpt-3.5-turbo"),
        instructions=[
            "Trabalhem juntos para fornecer respostas completas.",
            "O pesquisador deve buscar informa√ß√µes e o analista deve analis√°-las.",
            "Sempre incluam fontes e c√°lculos quando relevante."
        ],
        show_tool_calls=True,
        markdown=True,
    )
    
    print(f"‚úÖ Time criado com {len(team.members)} agentes")
    return team

def criar_arquivo_conhecimento():
    """Cria um arquivo de exemplo para a base de conhecimento"""
    conteudo = """
# Base de Conhecimento - Agno Framework

## O que √© o Agno?
O Agno √© um framework Python para constru√ß√£o de sistemas multi-agentes com mem√≥ria, conhecimento e racioc√≠nio.

## Caracter√≠sticas Principais:
- Suporte a 23+ provedores de modelos
- Instantia√ß√£o r√°pida (~3Œºs)
- Baixo uso de mem√≥ria (~6.5Kib)
- Suporte multimodal nativo
- RAG ag√™ntico integrado
- Sistema de mem√≥ria persistente

## N√≠veis de Sistemas Ag√™nticos:
1. Agentes com ferramentas e instru√ß√µes
2. Agentes com conhecimento e armazenamento
3. Agentes com mem√≥ria e racioc√≠nio
4. Times de agentes que colaboram
5. Fluxos de trabalho ag√™nticos com estado

## Casos de Uso:
- Assistentes de pesquisa
- An√°lise de documentos
- Automa√ß√£o de tarefas
- Chatbots inteligentes
- Sistemas de suporte
"""
    
    with open("conhecimento_exemplo.txt", "w", encoding="utf-8") as f:
        f.write(conteudo)
    
    print("üìÑ Arquivo de conhecimento criado: conhecimento_exemplo.txt")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Exemplos do Agno Framework")
    print("=" * 50)
    
    # Verificar se as chaves de API est√£o configuradas
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada. Os exemplos n√£o far√£o chamadas reais.")
        print("   Para testar completamente, configure: export OPENAI_API_KEY=sua_chave")
    
    print()
    
    # Criar arquivo de conhecimento
    criar_arquivo_conhecimento()
    print()
    
    # Exemplos de diferentes tipos de agentes
    try:
        agente_basico = exemplo_agente_basico()
        print()
        
        agente_ferramentas = exemplo_agente_com_ferramentas()
        print()
        
        agente_conhecimento = exemplo_agente_com_conhecimento()
        print()
        
        agente_memoria = exemplo_agente_com_memoria()
        print()
        
        time_agentes = exemplo_time_de_agentes()
        print()
        
        print("üéâ Todos os exemplos foram criados com sucesso!")
        print("\nüìù Pr√≥ximos passos:")
        print("1. Configure sua OPENAI_API_KEY para testar os agentes")
        print("2. Use agent.print_response('sua pergunta') para interagir")
        print("3. Use team.print_response('sua pergunta') para usar o time")
        print("4. Explore mais exemplos em: https://docs.agno.com/examples")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar exemplos: {e}")

if __name__ == "__main__":
    main()